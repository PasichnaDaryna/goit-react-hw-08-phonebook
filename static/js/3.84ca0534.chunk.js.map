{"version":3,"sources":["components/contactList/ContactList.js","components/Form/Form.js","components/Filter/Filter.js","views/ContactsView.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js"],"names":["ContactList","visibleContacts","useSelector","getVisibleContacts","dispatch","useDispatch","className","map","id","name","number","type","onClick","ContactOperations","onDeleteContact","Form","contacts","getAllContacts","useState","setName","setNumber","handleChange","e","target","value","resetInput","onSubmit","preventDefault","find","contact","toLowerCase","checkRepeatName","checkRepeatNumber","trim","checkEmptyQuery","test","checkValidNumber","toast","error","info","onChange","placeholder","Filter","getFilter","currentTarget","ContactsView","useEffect","contactsOperations","fetchContacts","_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","length","err","unsupportedIterableToArray","TypeError"],"mappings":"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","file":"static/js/3.84ca0534.chunk.js","sourcesContent":["import '../contactList/ContactList.css';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport * as ContactOperations from '../../redux/contacts/contacts-operations';\r\nimport { getVisibleContacts } from '../../redux/contacts/contacts-selectors';\r\n\r\nexport default function ContactList() {\r\n  const visibleContacts = useSelector(getVisibleContacts);\r\n  const dispatch = useDispatch();\r\n\r\n  const onDeleteContact = id => dispatch(ContactOperations.deleteContact(id));\r\n\r\n  return (\r\n    <ul className=\"contact-list\">\r\n      {visibleContacts.map(({ id, name, number }) => (\r\n        <li key={id}>\r\n          <p>\r\n            <b>{name} </b>\r\n            <em>{number}</em>\r\n          </p>\r\n          <button type=\"button\" onClick={() => onDeleteContact(id)}>\r\n            delete\r\n          </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n","import { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport { getAllContacts } from '../../redux/contacts/contacts-selectors';\r\n\r\nimport { toast } from 'react-toastify';\r\nimport * as ContactOperations from '../../redux/contacts/contacts-operations';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nimport '../Form/Form.css';\r\n\r\nfunction Form() {\r\n  const dispatch = useDispatch();\r\n  const contacts = useSelector(getAllContacts);\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n\r\n  const handleChange = e => {\r\n    const { name, value } = e.target;\r\n\r\n    switch (name) {\r\n      case 'name':\r\n        setName(value);\r\n        break;\r\n\r\n      case 'number':\r\n        setNumber(value);\r\n        break;\r\n\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const checkRepeatName = name => {\r\n    return contacts.find(\r\n      contact =>\r\n        contact.name && contact.name.toLowerCase() === name.toLowerCase(),\r\n    );\r\n  };\r\n\r\n  const checkRepeatNumber = number => {\r\n    return contacts.find(contact => contact.number === number);\r\n  };\r\n\r\n  const checkEmptyQuery = (name, number) => {\r\n    return name.trim() === '' || number.trim() === '';\r\n  };\r\n\r\n  const checkValidNumber = number => {\r\n    return !/\\d{3}[-]\\d{2}[-]\\d{2}/g.test(number);\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    if (checkRepeatName(name)) {\r\n      toast(`'${name}' is already in use!`);\r\n    } else if (checkRepeatNumber(number)) {\r\n      toast(`ðŸ¤” ${number} is already in use`);\r\n    } else if (checkEmptyQuery(name, number)) {\r\n      toast.info(' Enter the correct name and number!');\r\n    } else if (checkValidNumber(number)) {\r\n      toast.error('# Enter the correct phone number!');\r\n    } else {\r\n      dispatch(ContactOperations.addContact(name, number));\r\n    }\r\n    resetInput();\r\n  };\r\n\r\n  const resetInput = () => {\r\n    setName('');\r\n    setNumber('');\r\n  };\r\n\r\n  return (\r\n    <form id=\"contact\" onSubmit={handleSubmit}>\r\n      <label>\r\n        Name\r\n        <input\r\n          className=\"input-field\"\r\n          type=\"text\"\r\n          name=\"name\"\r\n          value={name}\r\n          onChange={handleChange}\r\n          placeholder=\"John Dows\"\r\n        />\r\n      </label>\r\n      <br />\r\n      <label>\r\n        Phone number\r\n        <input\r\n          className=\"input-field\"\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          value={number}\r\n          onChange={handleChange}\r\n          placeholder=\"459-12-56\"\r\n        />\r\n      </label>\r\n\r\n      <button type=\"submit\" className=\"submit-button\">\r\n        Add contact\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default Form;\r\n","import '../Filter/Filter.css';\r\n\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { getFilter } from '../../redux/contacts/contacts-selectors';\r\nimport * as ContactOperations from '../../redux/contacts/contacts-actions';\r\n\r\nconst Filter = () => {\r\n  const value = useSelector(getFilter);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <label>\r\n      Find contacts by name\r\n      <input\r\n        type=\"text\"\r\n        value={value}\r\n        onChange={e =>\r\n          dispatch(ContactOperations.changeFilter(e.currentTarget.value))\r\n        }\r\n      />\r\n    </label>\r\n  );\r\n};\r\n\r\nexport default Filter;\r\n","import { useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport ContactList from '../components/contactList/ContactList';\r\nimport Form from '../components/Form/Form';\r\n\r\nimport Filter from '../components/Filter/Filter';\r\n\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { contactsOperations } from '../redux/contacts';\r\n\r\nexport default function ContactsView() {\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => dispatch(contactsOperations.fetchContacts()), [dispatch]);\r\n  return (\r\n    <div>\r\n      <h1>Phonebook</h1>\r\n      <Form />\r\n      <h2>Contacts</h2>\r\n      <Filter />\r\n      <ContactList />\r\n    </div>\r\n  );\r\n}\r\n","import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"sourceRoot":""}